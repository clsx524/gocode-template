// Code generated by MockGen. DO NOT EDIT.
// Source: rpc/company/company.twirp.go

// Package company is a generated GoMock package.
package company

import (
	context "context"
	http "net/http"
	reflect "reflect"

	company "github.com/clsx524/gocode-template/rpc/company"
	gomock "github.com/golang/mock/gomock"
)

// MockCompanyService is a mock of CompanyService interface.
type MockCompanyService struct {
	ctrl     *gomock.Controller
	recorder *MockCompanyServiceMockRecorder
}

// MockCompanyServiceMockRecorder is the mock recorder for MockCompanyService.
type MockCompanyServiceMockRecorder struct {
	mock *MockCompanyService
}

// NewMockCompanyService creates a new mock instance.
func NewMockCompanyService(ctrl *gomock.Controller) *MockCompanyService {
	mock := &MockCompanyService{ctrl: ctrl}
	mock.recorder = &MockCompanyServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCompanyService) EXPECT() *MockCompanyServiceMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockCompanyService) Add(arg0 context.Context, arg1 *company.AddRequest) (*company.AddResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0, arg1)
	ret0, _ := ret[0].(*company.AddResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockCompanyServiceMockRecorder) Add(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockCompanyService)(nil).Add), arg0, arg1)
}

// Search mocks base method.
func (m *MockCompanyService) Search(arg0 context.Context, arg1 *company.SearchRequest) (*company.SearchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", arg0, arg1)
	ret0, _ := ret[0].(*company.SearchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockCompanyServiceMockRecorder) Search(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockCompanyService)(nil).Search), arg0, arg1)
}

// MockHTTPClient is a mock of HTTPClient interface.
type MockHTTPClient struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPClientMockRecorder
}

// MockHTTPClientMockRecorder is the mock recorder for MockHTTPClient.
type MockHTTPClientMockRecorder struct {
	mock *MockHTTPClient
}

// NewMockHTTPClient creates a new mock instance.
func NewMockHTTPClient(ctrl *gomock.Controller) *MockHTTPClient {
	mock := &MockHTTPClient{ctrl: ctrl}
	mock.recorder = &MockHTTPClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHTTPClient) EXPECT() *MockHTTPClientMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockHTTPClient) Do(req *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", req)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockHTTPClientMockRecorder) Do(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockHTTPClient)(nil).Do), req)
}

// MockTwirpServer is a mock of TwirpServer interface.
type MockTwirpServer struct {
	ctrl     *gomock.Controller
	recorder *MockTwirpServerMockRecorder
}

// MockTwirpServerMockRecorder is the mock recorder for MockTwirpServer.
type MockTwirpServerMockRecorder struct {
	mock *MockTwirpServer
}

// NewMockTwirpServer creates a new mock instance.
func NewMockTwirpServer(ctrl *gomock.Controller) *MockTwirpServer {
	mock := &MockTwirpServer{ctrl: ctrl}
	mock.recorder = &MockTwirpServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTwirpServer) EXPECT() *MockTwirpServerMockRecorder {
	return m.recorder
}

// PathPrefix mocks base method.
func (m *MockTwirpServer) PathPrefix() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PathPrefix")
	ret0, _ := ret[0].(string)
	return ret0
}

// PathPrefix indicates an expected call of PathPrefix.
func (mr *MockTwirpServerMockRecorder) PathPrefix() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PathPrefix", reflect.TypeOf((*MockTwirpServer)(nil).PathPrefix))
}

// ProtocGenTwirpVersion mocks base method.
func (m *MockTwirpServer) ProtocGenTwirpVersion() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProtocGenTwirpVersion")
	ret0, _ := ret[0].(string)
	return ret0
}

// ProtocGenTwirpVersion indicates an expected call of ProtocGenTwirpVersion.
func (mr *MockTwirpServerMockRecorder) ProtocGenTwirpVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProtocGenTwirpVersion", reflect.TypeOf((*MockTwirpServer)(nil).ProtocGenTwirpVersion))
}

// ServeHTTP mocks base method.
func (m *MockTwirpServer) ServeHTTP(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ServeHTTP", arg0, arg1)
}

// ServeHTTP indicates an expected call of ServeHTTP.
func (mr *MockTwirpServerMockRecorder) ServeHTTP(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServeHTTP", reflect.TypeOf((*MockTwirpServer)(nil).ServeHTTP), arg0, arg1)
}

// ServiceDescriptor mocks base method.
func (m *MockTwirpServer) ServiceDescriptor() ([]byte, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceDescriptor")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(int)
	return ret0, ret1
}

// ServiceDescriptor indicates an expected call of ServiceDescriptor.
func (mr *MockTwirpServerMockRecorder) ServiceDescriptor() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceDescriptor", reflect.TypeOf((*MockTwirpServer)(nil).ServiceDescriptor))
}
