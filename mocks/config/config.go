// Code generated by MockGen. DO NOT EDIT.
// Source: config/config.go

// Package config is a generated GoMock package.
package config

import (
	reflect "reflect"

	config "github.com/clsx524/gocode-template/config"
	gomock "github.com/golang/mock/gomock"
	zap "go.uber.org/zap"
)

// MockProvider is a mock of Provider interface.
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
}

// MockProviderMockRecorder is the mock recorder for MockProvider.
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance.
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// LoggerConfig mocks base method.
func (m *MockProvider) LoggerConfig() zap.Config {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoggerConfig")
	ret0, _ := ret[0].(zap.Config)
	return ret0
}

// LoggerConfig indicates an expected call of LoggerConfig.
func (mr *MockProviderMockRecorder) LoggerConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoggerConfig", reflect.TypeOf((*MockProvider)(nil).LoggerConfig))
}

// MongoConfig mocks base method.
func (m *MockProvider) MongoConfig() config.MongoConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MongoConfig")
	ret0, _ := ret[0].(config.MongoConfig)
	return ret0
}

// MongoConfig indicates an expected call of MongoConfig.
func (mr *MockProviderMockRecorder) MongoConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MongoConfig", reflect.TypeOf((*MockProvider)(nil).MongoConfig))
}

// ServiceConfig mocks base method.
func (m *MockProvider) ServiceConfig() config.ServiceConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceConfig")
	ret0, _ := ret[0].(config.ServiceConfig)
	return ret0
}

// ServiceConfig indicates an expected call of ServiceConfig.
func (mr *MockProviderMockRecorder) ServiceConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceConfig", reflect.TypeOf((*MockProvider)(nil).ServiceConfig))
}
