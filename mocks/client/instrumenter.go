// Code generated by MockGen. DO NOT EDIT.
// Source: client/instrumenter.go

// Package client is a generated GoMock package.
package client

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	zap "go.uber.org/zap"
)

// MockInstrumenter is a mock of Instrumenter interface.
type MockInstrumenter struct {
	ctrl     *gomock.Controller
	recorder *MockInstrumenterMockRecorder
}

// MockInstrumenterMockRecorder is the mock recorder for MockInstrumenter.
type MockInstrumenterMockRecorder struct {
	mock *MockInstrumenter
}

// NewMockInstrumenter creates a new mock instance.
func NewMockInstrumenter(ctrl *gomock.Controller) *MockInstrumenter {
	mock := &MockInstrumenter{ctrl: ctrl}
	mock.recorder = &MockInstrumenterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInstrumenter) EXPECT() *MockInstrumenterMockRecorder {
	return m.recorder
}

// Logger mocks base method.
func (m *MockInstrumenter) Logger() *zap.SugaredLogger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logger")
	ret0, _ := ret[0].(*zap.SugaredLogger)
	return ret0
}

// Logger indicates an expected call of Logger.
func (mr *MockInstrumenterMockRecorder) Logger() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logger", reflect.TypeOf((*MockInstrumenter)(nil).Logger))
}
